name: Push to Server and Build Docker Compose

on:
  push:
    branches: [ master ]

jobs:
  deploy:
    runs-on: ubuntu-latest # 这是 GitHub Actions 的服务器环境 eg: CentOS, Ubuntu, Windows Server, macOS
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install go
        uses: actions/setup-go@v2
        with:
          go-version: 1.20.1

      - name: Generate new version
        run: |
          sh ./config/version.sh   # 执行config/version.sh 脚本 #!/bin/bash
          version=$(grep "version =" ./config/config.ini | awk -F= '{print $2}' | tr -d ' ')
          echo VERSION=$version >> $GITHUB_ENV

      - name: Set up Git
        run: |
          git config user.email "1364952827@qq.com"
          git config user.name "ZZL"
          git status

      - name: swag init
        run: |
          export GO111MODULE=on
          export GOPROXY=https://goproxy.cn,direct
          go install github.com/swaggo/swag/cmd/swag@latest  # go get -u github.com/swaggo/swag/cmd/swag 
          swag init

      - name: create git branch
        run: |
          git checkout -b feature/$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_TOKEN }}

      - name: git add
        run: |
          git add .
          git commit -m "Swagger documentation and tag:$VERSION"
          git push origin feature/$VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_TOKEN }}

      - name: git genrate tag
        run: |
          git tag $VERSION
          git push origin $VERSION
        env:
          GITHUB_TOKEN: ${{ secrets.ALL_TOKEN }}


      - name: Build and Run Docker Compose
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          password: ${{ secrets.SERVER_PASSWORD }}
          envs: VERSION
          script: |
            cd /code/web_server2.0
            echo $VERSION is value 
            git -c credential.helper= -c core.quotepath=false -c log.showSignature=false fetch origin --recurse-submodules=no --progress --prune
            git checkout "feature/$VERSION" -f
            git branch
            # 拉取最新的远程分支
            git pull origin feature/$VERSION
            # 停止 Docker Compose 服务
            docker-compose stop app nginx
            # 后台启动 Docker Compose 服务
            #            nohup docker-compose up --no-deps app nginx > /dev/null 2>&1 &
                    nohup docker-compose up --no-deps --build app nginx > /dev/null 2>&1 &