version: "2.2"
networks:
  my-networks:
    driver: bridge
services:
  db:
    image: mysql:5.7
    ports:
      - "13306:3306"
    security_opt:
      - seccomp:unconfined
    command:
      --default-authentication-plugin=mysql_native_password
      --character-set-server=utf8mb4
      --collation-server=utf8mb4_unicode_ci
    environment:
      - MYSQL_ROOT_PASSWORD=12345678
      - MYSQL_DATABASE=app
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-P", "13306", "-u", "root", "-p12345678" ]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      my-networks:
  redis:
    image: redis:6.0
    ports:
      - "16379:6379"
    volumes:
      - ./docker/redis:/data
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      my-networks:
  app:
    image: web_server_2.0:latest
    ports:
      - "8080:8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    #      minio:
    #        condition: service_healthy
    environment:
      - ENPOINT=minio:9000
      - MINIO_BUCKET=articlehtml
      - MINIO_ACCESS_KEY=7YTJdmziHaEsmF9sjevy
      - MINIO_SECRET_KEY=L5pJdAuBguPjqCqhVEGNjG8pN6BMrgMs3pTylbyH
    networks:
      my-networks:
    build:
      context: .
      dockerfile: Dockerfile
    security_opt:
      - seccomp:unconfined
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health","||", "exit", "1" ]
      interval: 10s
      timeout: 10s
      retries: 3
  minio:
    image: bitnami/minio:latest
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=12345678
    healthcheck:
      test: [ "CMD", "curl", "--fail","http://localhost:9000/health/ready" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      my-networks:
  nginx:
    image: nginx:1.19.6
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      #      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/nginx/logs:/var/log/nginx
      - ./docker/nginx/html:/usr/share/nginx/html
      - ./docker/nginx/ssl:/etc/nginx/ssl
    #    depends_on:
    #      app:
    #        condition: service_healthy
    networks:
      my-networks:
volumes:
  db:
